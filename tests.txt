System.out.println();
        System.out.println("gammas from equation 11");
        double[] gammas2 = new double[N];
        for(int i = 0; i < N; i++){
            gammas2[i] = Math.pow(1 + 2 * B[i], 2) / (2 * (Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)));
            System.out.println(gammas2[i]);
        }

        System.out.println();
        System.out.println("a primes from equation 10");
        aPrimes = new double[N];
        for(int i = 0; i < N; i++){
            aPrimes[i] = (Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)) * a.data[i][0];
            System.out.println(aPrimes[i]);
            aPrimes[i] = (Math.pow(1 + 2 * B[i], 2) / (2 * gammas2[i])) * a.data[i][0];
            System.out.println(aPrimes[i]);
        }

        System.out.println();
        System.out.println("capitalPhis from equation 9");
        double[] capitalPhis2 = new double[N];
        for(int i = 0; i < N; i++){
            capitalPhis2[i] = ((1 + B[i]) * positiveCounts[i] + B[i] * negativeCounts[i]) / (Math.pow(2, N - 1));
            System.out.println(capitalPhis2[i]);
        }

        System.out.println();
        System.out.println("ks from equation 13");
        double[] k = new double[N];
        for(int i = 0; i < N; i++){
            k[i] = (-(N - 2) * gammas2[i] - 1) / ((N - 1) * Math.pow(gammas2[i], 2) - (N - 2) * gammas2[i] - 1);
            System.out.println(k[i]);
        }

        System.out.println();
        System.out.println("answers from test 1");
        double[] test = new double[N];
        for(int i = 0; i < N; i++){
            test[i] = (1 / ((Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)))) * aPrimes[i];
            System.out.println(test[i]);
        }

        double capitalPhi2Sum = 0;
        for(double capitalPhi2: capitalPhis2){
            capitalPhi2Sum += capitalPhi2;
        }

        System.out.println();
        System.out.println("Capital Phi Sum");
        System.out.println(capitalPhi2Sum);

        System.out.println();
        System.out.println("answers from test 2");
        double[] test2 = new double[N];
        for(int i = 0; i < N; i++){
            test2[i] = (1 / ((Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)))) * (((-(N - 2) * gammas2[i] - 1) / ((N - 1) * Math.pow(gammas2[i], 2) - (N - 2) * gammas2[i] - 1)) * capitalPhis2[i] + (gammas2[i] / ((N - 1) * Math.pow(gammas2[i], 2) - (N - 2) * gammas2[i] - 1)) * (capitalPhi2Sum - capitalPhis2[i]));
            System.out.println(test2[i]);
        }

        System.out.println();
        System.out.println("answers from test 3");
        double[] test3 = new double[N];
        for(int i = 0; i < N; i++){
            test3[i] = (k[i] / (((Math.pow(1 + B[i], 2) + Math.pow(B[i], 2))))) * (capitalPhis2[i] - (gammas2[i] / ((N - 2) * gammas2[i] + 1)) * (capitalPhi2Sum - capitalPhis2[i]));
            System.out.println(test3[i]);
        }

        System.out.println();
        System.out.println("First k Part");
        System.out.println((k[0] / (((Math.pow(1 + B[0], 2) + Math.pow(B[0], 2))))));


        System.out.println();
        System.out.println("answers from test 4");
        double[] test4 = new double[N];
        for(int i = 0; i < N; i++){
            test4[i] = (k[i] / (((Math.pow(1 + B[i], 2) + Math.pow(B[i], 2))))) * (capitalPhis2[i] - (((Math.pow(1 + 2 * B[i], 2)) / (2 * (Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)))) / ((N - 2) * ((Math.pow(1 + 2 * B[i], 2)) / (2 * (Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)))) + 1)) * (capitalPhi2Sum - capitalPhis2[i]));
            System.out.println(test4[i]);
        }


        System.out.println();
        System.out.println("answers from test 5");
        double[] test5 = new double[N];
        for(int i = 0; i < N; i++){
            test5[i] = (k[i] / (((Math.pow(1 + B[i], 2) + Math.pow(B[i], 2))))) * (capitalPhis2[i] - (Math.pow(1 + 2 * B[i], 2) / ((N -2) * (Math.pow(1 + 2 * B[i], 2)) + 2 * (Math.pow(1 + B[i], 2) + Math.pow(B[i], 2)))) * (capitalPhi2Sum - capitalPhis2[i]));
            System.out.println(test5[i]);


        }

        System.out.println();
        System.out.println("answers from equation 14");
        double[][] test6 = new double[N][N];
        for(int i = 0; i < N; i++){
            for(int u = 0; u < N; u++){
                if(u == i){
                    test6[i][u] = -(N - 2) * gammas2[i] - 1;
                }else{
                    test6[i][u] = gammas2[i];
                }
            }
        }

        double[][] matrixData2 = new double[N][N];
        for(int n = 0; n < N; n++){
            for(int m = 0; m < N; m++){
                if(m == n){
                    matrixData2[n][m] = 1;
                }else{
                    matrixData2[n][m] = gammas2[0];
                }
            }
        }
        System.out.println();
        System.out.println("Matrix A");
        Matrix matrix1 = new Matrix(matrixData2);
        matrix1.display();

        Matrix testMatrix = new Matrix(test6);
        double constant = 1 / ((N - 1f) * Math.pow(gammas2[0], 2) - (N - 2) * gammas2[0] - 1);
        testMatrix = testMatrix.multiplyByConstant(constant);
        System.out.println();
        System.out.println("Test Inverse Matrix");
        testMatrix.display();

        double[] equation201 = new double[N];
        for(int n = 0; n < N; n++){
            equation201[n] = ((2.0 * N) / (N + 1.0)) * (capitalPhis2[n] - (1.0 / N) * (capitalPhi2Sum - capitalPhis2[n]));
        }

        System.out.println();
        System.out.println("Answers from equation 21 part 1");
        for(double answer:equation201){
            System.out.println(answer);
        }

        double[] equation202 = new double[N];
        for(int n = 0; n < N; n++){
            equation202[n] = ((2.0 * N) / (N + 1.0)) * (((N + 1.0)/ N) * capitalPhis2[n] - (1.0 / N) * capitalPhi2Sum) ;
        }

        System.out.println();
        System.out.println("Answers from equation 21 part 2");
        for(double answer:equation202){
            System.out.println(answer);
        }

        double[] equation203 = new double[N];
        for(int n = 0; n < N; n++){
            equation203[n] = 2 * capitalPhis2[n] - (2 / (N + 1.0)) * capitalPhi2Sum;
        }

        System.out.println();
        System.out.println("Answers from equation 21 part 3");
        for(double answer:equation203){
            System.out.println(answer);
        }