Counts:
        double[] positiveCounts = new double[N];
        double[] negativeCounts = new double[N];
        for(int i = 0; i < N; i++) {
            for (int o = 0; o < nodeTable[i].length; o++) {
                if (nodeTable[i][o] == 0) {
                    negativeCounts[i] += phis[o];
                }else if (nodeTable[i][o] == 1) {
                    positiveCounts[i] += phis[o];
                }
            }
        }

        double negativeSum = 0;
        for (double negativeCount : negativeCounts) {
            negativeSum += negativeCount / Math.pow(2, N - 1);
        }

        double negativeCountsAverage = negativeSum/N;

        double positiveSum = 0;
        for (double positiveCount : positiveCounts) {
            positiveSum += positiveCount / Math.pow(2, N - 1);
        }

        double positiveCountAverage = positiveSum/N;
Case 1:
        double[] answers = new double[N];
        for(int i = 0; i < N; i++){
            double answer = ((2.0 * N) / (N + 1.0))*((positiveCounts[i] / Math.pow(2.0, N - 1.0)) - positiveCountAverage);
            answers[i] = answer;
        }

        System.out.println(" ");
        System.out.println("Answers from test case 1");
        for (double answer : answers) {
            System.out.println(answer);
        }

Case 2:
        double[] answers = new double[N];
        for(int i = 0; i < N; i++){
            double answer = ((2.0 * N) / (N + 1.0))*(negativeCountsAverage - (negativeCounts[i] / Math.pow(2.0, N - 1.0)));
            answers[i] = answer;
        }

        System.out.println(" ");
        System.out.println("Answers from test case 2");
        for (double answer : answers) {
            System.out.println(answer);
        }
Case 3:
        double[] answers = new double[N];
        for(int i = 0; i < N; i++){
            double answer = (-1/(2 * B[i])) * ((positiveCounts[i] / Math.pow(2.0, N - 1.0)) - (negativeCounts[i] / Math.pow(2.0, N - 1.0)));
            answers[i] = answer;
        }

        System.out.println(" ");
        System.out.println("Answers of test case 3");
        for (double answer : answers) {
            System.out.println(answer);
        }
